# This schema defines the data models for the Health Florence application

type User @model @auth(rules: [
  { allow: public, provider: apiKey, operations: [create, read, update, delete] },
  { allow: owner }
]) {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
  dateOfBirth: AWSDate
  address: String
  city: String
  state: String
  zipCode: String
  emergencyContactName: String
  emergencyContactPhone: String
  allergies: String
  medicalConditions: String
  currentMedications: String
  height: Float
  weight: Float
  gender: String
  bloodType: String
  role: String! @default(value: "user")
  
  # Enhanced fields for production
  isActive: Boolean! @default(value: "true")
  lastLoginAt: AWSDateTime
  loginCount: Int! @default(value: "0")
  preferences: AWSJSON
  notificationSettings: AWSJSON
  privacySettings: AWSJSON
  subscriptionTier: String @default(value: "basic")
  subscriptionExpiresAt: AWSDateTime
  
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  dietaryPlans: [DietaryPlan] @hasMany(fields: ["id"])
  healthGoals: [HealthGoal] @hasMany(fields: ["id"])
  healthConditions: [HealthCondition] @hasMany(fields: ["id"])
  haicRewards: [HAICReward] @hasMany(fields: ["id"])
}

type Doctor @model @auth(rules: [
  { allow: public, provider: iam, operations: [read] },
  { allow: owner, operations: [create, update, delete] },
  { allow: private, operations: [read] }
]) {
  id: ID!
  userId: ID!
  specialization: String!
  licenseNumber: String!
  yearsOfExperience: Int!
  user: User @hasOne(fields: ["userId"])
  appointments: [Appointment] @hasMany(fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Appointment @model @auth(rules: [
  { allow: owner, operations: [create, read, update, delete] },
  { allow: private, operations: [read] }
]) {
  id: ID!
  userId: ID!
  doctorId: ID!
  date: AWSDateTime!
  status: String! # scheduled, completed, cancelled
  notes: String
  user: User @hasOne(fields: ["userId"])
  doctor: Doctor @hasOne(fields: ["doctorId"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type AuditEvent @model @auth(rules: [
  { allow: public, provider: apiKey, operations: [create, read, update] }
]) {
  id: ID!
  timestamp: AWSDateTime!
  userId: String!
  action: String!
  resourceId: String!
  details: AWSJSON!
  transactionHash: String
  merkleRoot: String
  batchId: String
}

type AuditBatch @model @auth(rules: [
  { allow: public, provider: apiKey, operations: [create, read, update] }
]) {
  id: ID!
  timestamp: AWSDateTime!
  merkleRoot: String!
  transactionHash: String!
  events: [AuditEvent] @hasMany
}

type DietaryPlan @model @auth(rules: [
  { allow: owner, operations: [create, read, update, delete] }
]) {
  id: ID!
  userId: ID!
  name: String!
  category: String! # breakfast, lunch, dinner, snack
  calories: Int!
  protein: Float!
  carbs: Float!
  fat: Float!
  fiber: Float!
  isRecommended: Boolean!
  isCompleted: Boolean!
  time: String
  reason: String
  user: User @belongsTo(fields: ["userId"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type HealthGoal @model @auth(rules: [
  { allow: owner, operations: [create, read, update, delete] }
]) {
  id: ID!
  userId: ID!
  title: String!
  description: String!
  category: String! # fitness, nutrition, mental, medical, lifestyle
  target: Float!
  current: Float!
  unit: String!
  deadline: AWSDate!
  isCompleted: Boolean!
  isRecommended: Boolean!
  priority: String! # low, medium, high
  reward: Int! # HAIC tokens
  reason: String
  user: User @belongsTo(fields: ["userId"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type HealthCondition @model @auth(rules: [
  { allow: owner, operations: [create, read, update, delete] }
]) {
  id: ID!
  userId: ID!
  name: String!
  severity: String! # mild, moderate, severe
  status: String! # active, managed, resolved
  diagnosedDate: AWSDate!
  description: String!
  medications: [String]
  user: User @belongsTo(fields: ["userId"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type HAICReward @model @auth(rules: [
  { allow: owner, operations: [create, read, update] }
]) {
  id: ID!
  userId: ID!
  amount: Int!
  reason: String!
  category: String! # goal_completion, dietary_adherence, appointment_attendance, health_checkin
  transactionHash: String
  user: User @belongsTo(fields: ["userId"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input CreateUserInput {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
  role: String!
  isActive: Boolean
  lastLoginAt: AWSDateTime
  loginCount: Int
  preferences: AWSJSON
  notificationSettings: AWSJSON
  privacySettings: AWSJSON
  subscriptionTier: String
  subscriptionExpiresAt: AWSDateTime
}

input UpdateUserInput {
  id: ID!
  email: String
  firstName: String
  lastName: String
  phoneNumber: String
  dateOfBirth: AWSDate
  address: String
  city: String
  state: String
  zipCode: String
  emergencyContactName: String
  emergencyContactPhone: String
  allergies: String
  medicalConditions: String
  currentMedications: String
  role: String
  isActive: Boolean
  lastLoginAt: AWSDateTime
  loginCount: Int
  preferences: AWSJSON
  notificationSettings: AWSJSON
  privacySettings: AWSJSON
  subscriptionTier: String
  subscriptionExpiresAt: AWSDateTime
}

input DeleteUserInput {
  id: ID!
}

input CreateDoctorInput {
  id: ID!
  userId: ID!
  specialization: String!
  licenseNumber: String!
  yearsOfExperience: Int!
}

input UpdateDoctorInput {
  id: ID!
  userId: ID
  specialization: String
  licenseNumber: String
  yearsOfExperience: Int
}

input DeleteDoctorInput {
  id: ID!
}

input CreateAppointmentInput {
  id: ID!
  userId: ID!
  doctorId: ID!
  date: AWSDateTime!
  status: String!
  notes: String
}

input UpdateAppointmentInput {
  id: ID!
  userId: ID
  doctorId: ID
  date: AWSDateTime
  status: String
  notes: String
}

input DeleteAppointmentInput {
  id: ID!
}

input CreateDietaryPlanInput {
  id: ID!
  userId: ID!
  name: String!
  category: String!
  calories: Int!
  protein: Float!
  carbs: Float!
  fat: Float!
  fiber: Float!
  isRecommended: Boolean!
  isCompleted: Boolean!
  time: String
  reason: String
}

input UpdateDietaryPlanInput {
  id: ID!
  userId: ID
  name: String
  category: String
  calories: Int
  protein: Float
  carbs: Float
  fat: Float
  fiber: Float
  isRecommended: Boolean
  isCompleted: Boolean
  time: String
  reason: String
}

input DeleteDietaryPlanInput {
  id: ID!
}

input CreateHealthGoalInput {
  id: ID!
  userId: ID!
  title: String!
  description: String!
  category: String!
  target: Float!
  current: Float!
  unit: String!
  deadline: AWSDate!
  isCompleted: Boolean!
  isRecommended: Boolean!
  priority: String!
  reward: Int!
  reason: String
}

input UpdateHealthGoalInput {
  id: ID!
  userId: ID
  title: String
  description: String
  category: String
  target: Float
  current: Float
  unit: String
  deadline: AWSDate
  isCompleted: Boolean
  isRecommended: Boolean
  priority: String
  reward: Int
  reason: String
}

input DeleteHealthGoalInput {
  id: ID!
}

input CreateHealthConditionInput {
  id: ID!
  userId: ID!
  name: String!
  severity: String!
  status: String!
  diagnosedDate: AWSDate!
  description: String!
  medications: [String]
}

input UpdateHealthConditionInput {
  id: ID!
  userId: ID
  name: String
  severity: String
  status: String
  diagnosedDate: AWSDate
  description: String
  medications: [String]
}

input DeleteHealthConditionInput {
  id: ID!
}

input CreateHAICRewardInput {
  id: ID!
  userId: ID!
  amount: Int!
  reason: String!
  category: String!
  transactionHash: String
}

input UpdateHAICRewardInput {
  id: ID!
  userId: ID
  amount: Int
  reason: String
  category: String
  transactionHash: String
}

input DeleteHAICRewardInput {
  id: ID!
}
